{
  "comments": [
    {
      "key": {
        "uuid": "6eba565f_56668fb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2020-08-28T13:23:54Z",
      "side": 1,
      "message": "Hi Mark, do you mind taking a look? This introduces some of the changes I mentioned over email. I wasn\u0027t quite sure how to test this, I suppose you only have a CQ in the crashpad repo, correct?",
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8785641_29dcc52f",
        "filename": "base/strings/utf_string_conversion_utils.cc",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-08-28T21:00:28Z",
      "side": 1,
      "message": "Templatize on the string type itself, not on the template parameters that make up the string. If you need to refer to CharT or Traits, reference typename StringType::value_type and typename StringType::traits_type [but you will almost definitely not need to refer to traits_type at all].\n\nTemplatizing on CharT or CharT and Traits directly breaks down for basic_strings that use a non-default allocator (which admittedly we don’t do), has caused subtle bugs for us in the past (which admittedly may not occur here), and most importantly, is just more extra and unnecessary legwork when you already have a perfectly good string type that you can use as a template parameter and as a type for the out-parameter pointer argument directly.",
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6bd010d_777bc69d",
        "filename": "base/strings/utf_string_conversion_utils.cc",
        "patchSetId": 7
      },
      "lineNbr": 16,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2020-09-08T13:29:00Z",
      "side": 1,
      "message": "Ack. I initially did this to narrow down the amount of types that could be passed to this function. When simply using a StringType template param and just requiring value_type, push_back(), and resize() to be well-formed we open up the possibility to pass in other types like std::vector or std::deque which might not be desired. However, I do agree that it is simpler and avoids some of the problems you mentioned. Fixed now.",
      "parentUuid": "a8785641_29dcc52f",
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "127fe0e9_b39c85c5",
        "filename": "base/strings/utf_string_conversion_utils.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-08-28T21:00:28Z",
      "side": 1,
      "message": "Style nit: inline comments like this use [at least] two spaces between the last non-comment thing on the line and the // that starts the comment.\n\nhttps://google.github.io/styleguide/cppguide.html#Implementation_Comments\n\nThis comment applies elsewhere in this change.",
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49afc47c_5dd4affd",
        "filename": "base/strings/utf_string_conversion_utils.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2020-09-08T13:29:00Z",
      "side": 1,
      "message": "Done (similar to the above comment re `git cl format`).",
      "parentUuid": "127fe0e9_b39c85c5",
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70b22384_91e164a9",
        "filename": "base/strings/utf_string_conversion_utils.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-08-28T21:00:28Z",
      "side": 1,
      "message": "I don’t see this macro in mini_chromium anywhere, and I don’t see anything in this change #defining it. Should I?",
      "range": {
        "startLine": 32,
        "startChar": 12,
        "endLine": 32,
        "endChar": 42
      },
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2898a889_d4251762",
        "filename": "base/strings/utf_string_conversion_utils.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2020-09-08T13:29:00Z",
      "side": 1,
      "message": "No. This is meant to future proof the code for when std::wstring and base::string16 are distinct types. Due to the ODR I currently can\u0027t define the method twice, which is why I use this macro to disable this code for now. Once base::string16 is switched I will define this macro, and then remove usages afterwards. Does this sound good to you or do you have another suggestion?",
      "parentUuid": "70b22384_91e164a9",
      "range": {
        "startLine": 32,
        "startChar": 12,
        "endLine": 32,
        "endChar": 42
      },
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a783adc_5bb0ac1a",
        "filename": "base/strings/utf_string_conversion_utils.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-09-08T14:04:00Z",
      "side": 1,
      "message": "\u003e No. This is meant to future proof the code for when std::wstring and base::string16 are distinct types. Due to the ODR I currently can\u0027t define the method twice, which is why I use this macro to disable this code for now. Once base::string16 is switched I will define this macro, and then remove usages afterwards. Does this sound good to you or do you have another suggestion?\n\nmini_chromium is small enough and only has one relevant consumer (Crashpad) that I generally assume that all of mini_chromium can change at once, meaning that base::string16 would switch along with the new code landing. Immediately afterward, Crashpad would have a DEPS roll along with adapting it to interface changes as needed. We don’t normally leave dead code hanging around in mini_chromium, even for something forward-looking like this. We’d just make the change all at once.\n\nThe stuff that’s not protected by the dead macro is uncontroversial, but the stuff that’s behind the macro? It’s not even compile-tested anywhere…\n\nIt’s a small amount of code so I won’t argue against it any more than the above. But this is the way that we’d normally handle these transitions. Your call.",
      "parentUuid": "2898a889_d4251762",
      "range": {
        "startLine": 32,
        "startChar": 12,
        "endLine": 32,
        "endChar": 42
      },
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76ad97d1_7d96667b",
        "filename": "base/strings/utf_string_conversion_utils.h",
        "patchSetId": 7
      },
      "lineNbr": 33,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-08-28T21:00:28Z",
      "side": 1,
      "message": "In Chromium code, the * goes on the type, not on the variable. (mini_chromium and Crashpad follow Chromium style on this, perhaps more closely than even Chromium does.)\n\nThis comment applies throughout this change.",
      "range": {
        "startLine": 33,
        "startChar": 50,
        "endLine": 33,
        "endChar": 70
      },
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caecd96a_133f5208",
        "filename": "base/strings/utf_string_conversion_utils.h",
        "patchSetId": 7
      },
      "lineNbr": 33,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2020-09-08T13:29:00Z",
      "side": 1,
      "message": "Done. I had run `git cl format`, but looks like the Chromium style is not applied to mini_chromium when checked out independently. Fixed this now.",
      "parentUuid": "76ad97d1_7d96667b",
      "range": {
        "startLine": 33,
        "startChar": 50,
        "endLine": 33,
        "endChar": 70
      },
      "revId": "cc8c380eaf693e1c689e226df533f33a1f43c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}