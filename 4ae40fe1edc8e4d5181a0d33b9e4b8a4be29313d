{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0e61719c_cb9078f8",
        "filename": "build/config/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 519,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2021-08-05T14:59:55Z",
      "side": 1,
      "message": "1. This loses the “-a” of the fallback case from copy_command before.\n\n2. Previously, _copydir used a mkdir + pax concoction. Presumably if it could have been done with a single “cp”, it would have. What was the reason for _copydir being done the way it was? I recall that there was a reason, but unfortunately there’s no comment here. We ought to make sure that we’re still good to copy directories as appropriate even in the fallback case.",
      "range": {
        "startLine": 519,
        "startChar": 36,
        "endLine": 519,
        "endChar": 64
      },
      "revId": "4ae40fe1edc8e4d5181a0d33b9e4b8a4be29313d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb7bdf61_2c8f97dd",
        "filename": "build/config/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 519,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2021-08-05T15:32:40Z",
      "side": 1,
      "message": "2.\n\nThe original intention of the code in chromium was to recursively create hardlinks at dst/... pointing to src/... to avoid copying the files if possible (avoid filling disk and reduce wall time).\n\nThis was initially coded using `pax` because `cp` on macOS did not allow to recursively create hardlinks (nor clonefile). We found by trial and error that hardlinks caused issues on the bots that forced unnecessary rebuilds.\n\nIIRC, when a hardlink is created in $build_dir to some file in $src_dir, it changes some of the metadata (I think mtime, but not sure) used by `git` to decide whether a file may have changed or not. This metadata is updated when running `git status` but if instead user runs `git checkout`, git will overwrite those files unconditionally. On the bots, this caused the build to be dirty (since hardlinked file were now older than src files).\n\nWe tried to use a workaround on the bot to force a `git status`, but were told to revert it (don\u0027t remember why, but I think it was mostly because it was considered a wart).\n\nSo we decided to use `clonefile`. This requires a recent enough version of macOS and of the filesystem (I think it requires AppleFS). Clonefile does not have the issue that existed with hardlink (because it uses copy on write and does not mess with the metadata that is cached by git).\n\nThe fallback for `pax` was a recursive `cp` IIRC.\n\n1.\n\nAccording to cp man page, `cp -a` \u003d\u003d `cp -pPR`. The man page says that `-P` is the default. `-R` is present on the command-line quoted. `-p` means preserve metadata. I think there is an issue with some version of macOS where `cp -p` truncates the timestamp and loses sub-microseconds resolution.\n\nIIRC, this causes trouble with recent version of ninja that use those sub-microsecond resolution information.\n\nSee https://bugs.chromium.org/p/chromium/issues/detail?id\u003d931218#c20\n\nTL;DR:\n\n- `cp -a` is bugged on some version of macOS\n- hardlink interact badly with git + bot scripts\n\nThis is why code use `cp -cR || cp -R`, first try clonefile, and if it fails (src and dst on different disks or clonefile not supported), fallback to a recursive copy *not* preserving timestamps (since -a is broken)",
      "parentUuid": "0e61719c_cb9078f8",
      "range": {
        "startLine": 519,
        "startChar": 36,
        "endLine": 519,
        "endChar": 64
      },
      "revId": "4ae40fe1edc8e4d5181a0d33b9e4b8a4be29313d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7329d684_a9afd41c",
        "filename": "build/config/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 519,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2021-08-05T15:37:12Z",
      "side": 1,
      "message": "Link to the problem we investigated when using hardlinks:\nhttps://bugs.chromium.org/p/chromium/issues/detail?id\u003d642711\n\nNote that this does not cause build failure, just unnecessary build steps when doing the following step:\n\n  $ ninja -C ... \u0026\u0026 git checkout HEAD \u0026\u0026 ninja -C ...\n  \nYou would expect the second build to be a no-op but it was not.",
      "parentUuid": "bb7bdf61_2c8f97dd",
      "range": {
        "startLine": 519,
        "startChar": 36,
        "endLine": 519,
        "endChar": 64
      },
      "revId": "4ae40fe1edc8e4d5181a0d33b9e4b8a4be29313d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42e1cf7c_260bae22",
        "filename": "build/config/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 519,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2021-08-05T18:57:23Z",
      "side": 1,
      "message": "\u003e I think there is an issue with some version of macOS where `cp -p` truncates the timestamp and loses sub-microseconds resolution.\n\nI’m sure that this was a problem in the past, in the early days of APFS, but I don’t think it is any longer:\n\nmark@sweet16 zsh% touch /tmp/one\nmark@sweet16 zsh% cp -a /tmp/one /tmp/two\nmark@sweet16 zsh% gls -li --full-time /tmp/one /tmp/two\n81155244 -rw-r--r-- 1 mark wheel 0 2021-08-05 14:55:26.735359297 -0400 /tmp/one\n81155249 -rw-r--r-- 1 mark wheel 0 2021-08-05 14:55:26.735359297 -0400 /tmp/two\nmark@sweet16 zsh% sw_vers\nProductName:\tmacOS\nProductVersion:\t11.5.1\nBuildVersion:\t20G80\n\n(gls is GNU ls.)",
      "parentUuid": "7329d684_a9afd41c",
      "range": {
        "startLine": 519,
        "startChar": 36,
        "endLine": 519,
        "endChar": 64
      },
      "revId": "4ae40fe1edc8e4d5181a0d33b9e4b8a4be29313d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}